services:
  chat-service:
    build:
      context: ./back/chat-service
      dockerfile: Dockerfile
    env_file: .env
    ports:
      - "3002:3002"
    environment:
      - CHAT_PORT=3002
      - CHAT_DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@chat-db:5432/chat_db?schema=public
      - KAFKA_BROKER=kafka:9092
    depends_on:
      - chat-db
      - kafka
    volumes:
      - ./back/chat-service:/app
    networks:
      - app-network

  ext-tool:
    build:
      context: ./back/ext-tool
      dockerfile: Dockerfile
    env_file: .env
    ports:
      - "3006:3006"
    environment:
      - EXT_TOOL_PORT=3006
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - SERVICE_REGISTRY_URL=http://service-registry:3003
    depends_on:
      - chat-db
      - kafka
      - service-registry
    volumes:
      - ./back/ext-tool:/app
    networks:
      - app-network

  service-registry:
    build:
      context: ./back/service-registry
      dockerfile: Dockerfile
    ports:
      - "3003:3003"
    environment:
      - SERVICE_REGISTRY_PORT=3003
      - ZOOKEEPER_HOSTS=zookeeper:2181
      - ZOOKEEPER_TIMEOUT=10
      - LOG_LEVEL=INFO
    depends_on:
      - zookeeper
    volumes:
      - ./back/service-registry:/app
    networks:
      - app-network

  tool-agent:
    build:
      context: ./back/tool-agent
      dockerfile: Dockerfile
    ports:
      - "3004:3004"
    environment:
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - TOOL_AGENT_PORT=3004
      - TOOL_AGENT_DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@auth-db:5432/auth_db?schema=public
      - SERVICE_REGISTRY_URL=http://service-registry:3003
    depends_on:
      - auth-db
      - service-registry
    volumes:
      - ./back/tool-agent:/app
    networks:
      - app-network

  router-agent:
    build:
      context: ./back/router-agent
      dockerfile: Dockerfile
    ports:
      - "3007:3007"
    environment:
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - ROUTER_AGENT_PORT=3007
      - TOOL_AGENT_URL=http://tool-agent:3004
      - HISTORY_AGENT_URL=http://sync-service:3005
    depends_on:
      - tool-agent
      - sync-service
    volumes:
      - ./back/router-agent:/app
    networks:
      - app-network

  auth-db:
    image: postgres:15
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=auth_db
    volumes:
      - auth-db-data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d auth_db"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  chat-db:
    image: postgres:15
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=chat_db
    command: ["postgres", "-c", "wal_level=logical", "-c", "max_replication_slots=4", "-c", "max_wal_senders=4"]
    volumes:
      - chat-db-data:/var/lib/postgresql/data
    ports:
      - "5434:5432"
    networks:
      - app-network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.2.1
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - app-network

  kafka:
    image: confluentinc/cp-kafka:7.2.1
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_NUM_PARTITIONS: 1
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_LOG_RETENTION_HOURS: 168
    ports:
      - "9092:9092"
    networks:
      - app-network

  # Kafka Connect with Debezium
  connect:
    image: debezium/connect:2.4
    depends_on:
      - kafka
      - chat-db
    environment:
      - BOOTSTRAP_SERVERS=kafka:9092
      - GROUP_ID=1
      - CONFIG_STORAGE_TOPIC=my_connect_configs
      - OFFSET_STORAGE_TOPIC=my_connect_offsets
      - STATUS_STORAGE_TOPIC=my_connect_statuses
      - CONFIG_STORAGE_REPLICATION_FACTOR=1
      - OFFSET_STORAGE_REPLICATION_FACTOR=1
      - STATUS_STORAGE_REPLICATION_FACTOR=1
    ports:
      - "8083:8083"
    networks:
      - app-network

  sync-service:
    build:
      context: ./back/sync-service
      dockerfile: Dockerfile
    env_file: .env
    ports:
      - "3005:3005"
    environment:
      - SYNC_PORT=3005
      - SYNC_DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@chat-db:5432/chat_db?schema=public
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - CHROMADB_HOST=chromadb
      - CHROMADB_PORT=8000
    depends_on:
      - chat-db
      - kafka
      - connect
      - chromadb
    volumes:
      - ./back/sync-service:/app
    networks:
      - app-network

  message-agent:
    build:
      context: ./back/message-agent
      dockerfile: Dockerfile
    ports:
      - "3008:3008"
    environment:
      - MESSAGE_AGENT_PORT=3008
      - CHROMADB_HOST=chromadb
      - CHROMADB_PORT=8000
      - LOG_LEVEL=INFO
    depends_on:
      - chromadb
    volumes:
      - ./back/message-agent:/app
    networks:
      - app-network

  # ChromaDB for vector storage
  chromadb:
    image: chromadb/chroma:latest
    ports:
      - "8000:8000"
    environment:
      - CHROMA_HOST=0.0.0.0
      - CHROMA_PORT=8000
    volumes:
      - chromadb-data:/chroma/chroma
    networks:
      - app-network

  api-gateway:
    build:
      context: ./back/gateway
      dockerfile: Dockerfile
    ports:
      - "80:80"
    environment:
      - PORT=80
    depends_on:
      - chat-service
    volumes:
      - ./back/gateway/conf.d:/etc/nginx/conf.d
    networks:
      - app-network

volumes:
  auth-db-data:
  chat-db-data:
  chromadb-data:

networks:
  app-network:
    driver: bridge
