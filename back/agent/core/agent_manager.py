"""
Agent Manager module for managing AI agent lifecycle and interactions.

This module provides the AgentManager class which handles the creation,
management, and message processing for AI agents using LangChain and LangGraph.
"""

from typing import Dict

from dotenv import load_dotenv
from langchain.chat_models import init_chat_model
from langchain.tools import Tool
from langgraph.graph.state import CompiledStateGraph
from langgraph.prebuilt import create_react_agent

# Load environment variables
load_dotenv()


def echo_tool(text: str) -> str:
    """A simple echo tool for testing."""
    return text


echo = Tool(
    name="Echo", func=echo_tool, description="Echoes the input text back to the user."
)


class AgentManager:
    """
    Manages the lifecycle and interactions of conversation and tool agents.
    """

    def __init__(self):
        """
        Initializes the AgentManager with optional tools.
        :param tools: List of tools to be used by the agents.
        """
        self.tools = [echo]
        self.model = init_chat_model("google_genai:gemini-2.5-flash")
        self.agents: Dict[str, CompiledStateGraph] = {}

    def _create_agent(self, session_id: str) -> CompiledStateGraph:
        """Creates a new agent for the given session ID.
        :param session_id: Unique identifier for the session.
        :return: An instance of CompiledStateGraph.
        """
        if session_id in self.agents:
            raise ValueError(f"Agent with session_id {session_id} already exists.")
        agent = create_react_agent(
            tools=self.tools,
            model=self.model,
        )
        self.agents[session_id] = agent
        return self.agents[session_id]

    def _get_or_create_agent(self, session_id: str) -> CompiledStateGraph:
        """Retrieves an existing agent or creates a new one if it doesn't exist.
        :param session_id: Unique identifier for the session.
        """
        if session_id not in self.agents:
            return self._create_agent(session_id)
        return self.agents[session_id]

    def process_message(self, session_id: str, user_input: str) -> str:
        """Processes a user input message through the agent for the given session ID.
        :param session_id: Unique identifier for the session.
        :param user_input: The input message from the user.
        :return: The response generated by the agent.
        """
        agent = self._get_or_create_agent(session_id)
        response = agent.invoke({"messages": [{"role": "user", "content": user_input}]})
        return response

    def get_agent_count(self) -> int:
        """Returns the number of active agents.
        :return: Number of active agent sessions.
        """
        return len(self.agents)


agent_manager = AgentManager()
