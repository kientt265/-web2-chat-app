generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  user_id            String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  username           String                 @unique @db.VarChar(50)
  email              String                 @unique @db.VarChar(100)
  password_hash      String                 @db.VarChar(255)
  created_at         DateTime?              @default(now()) @db.Timestamp(6)
  updated_at         DateTime?              @default(now()) @db.Timestamp(6)
  conversations      conversation_members[]
  message_deliveries message_deliveries[]
  messages           messages[]
}

model conversations {
  conversation_id String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type            conversation_type
  name            String?                @db.VarChar(100)
  created_at      DateTime?              @default(now()) @db.Timestamp(6)
  members         conversation_members[]
  messages        messages[]
}

model conversation_members {
  conversation_id String        @db.Uuid
  user_id         String        @db.Uuid
  joined_at       DateTime?     @default(now()) @db.Timestamp(6)
  conversation    conversations @relation(fields: [conversation_id], references: [conversation_id], onDelete: Cascade, onUpdate: NoAction)
  user            users         @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)

  @@id([conversation_id, user_id])
}

model messages {
  message_id      String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  conversation_id String?              @db.Uuid
  sender_id       String?              @db.Uuid
  content         String
  sent_at         DateTime?            @default(now()) @db.Timestamp(6)
  is_read         Boolean?             @default(false)
  deliveries      message_deliveries[]
  conversation    conversations?       @relation(fields: [conversation_id], references: [conversation_id], onDelete: Cascade, onUpdate: NoAction)
  sender          users?               @relation(fields: [sender_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)
}

model message_deliveries {
  message_id   String    @db.Uuid
  user_id      String    @db.Uuid
  delivered_at DateTime? @db.Timestamp(6)
  read_at      DateTime? @db.Timestamp(6)
  message      messages  @relation(fields: [message_id], references: [message_id], onDelete: Cascade, onUpdate: NoAction)
  user         users     @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)

  @@id([message_id, user_id])
}

enum conversation_type {
  private
  group
}
