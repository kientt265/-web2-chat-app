
from langchain.agents import AgentExecutor
from langchain.tools import Tool
from typing import Dict
from agents.conversation_agent import conversation_agent
from langchain.agents import initialize_agent, AgentType
from core.agent import Agent


def echo_tool(text: str) -> str:
    """A simple echo tool for testing."""
    return text

echo = Tool(
    name="Echo",
    func=echo_tool,
    description="Echoes the input text back to the user."
)

class AgentManager:
    """
    Manages the lifecycle and interactions of conversation and tool agents.
    """

    def __init__(self, tools=None):
        """
        Initializes the AgentManager with optional tools.
        :param tools: List of tools to be used by the agents.
        """
        self.tools = tools or [echo]
        self.agents: Dict[str, Agent] = {}
    
    def create_agent(self, session_id: str) -> Agent:
        """        Creates a new agent for the given session ID.
        :param session_id: Unique identifier for the session.
        :return: An instance of Agent.
        """
        if session_id in self.agents:
            raise ValueError(f"Agent with session_id {session_id} already exists.")
        agent_executor = initialize_agent(
            tools=self.tools,
            llm=conversation_agent.llm if hasattr(conversation_agent, 'llm') else None,
            agent=AgentType.ZERO_SHOT_REACT_DESCRIPTION,
            verbose=True
        )
        self.agents[session_id] = Agent(session_id, agent_executor)
        return self.agents[session_id]
    
    def get_or_create_agent(self, session_id: str) -> Agent:
        """        Retrieves an existing agent or creates a new one if it doesn't exist.
        :param session_id: Unique identifier for the session.
        """
        if session_id not in self.agents:
            return self.create_agent(session_id)
        return self.agents[session_id]

    def process_message(self, session_id: str, user_input: str) -> str:
        """        Processes a user input message through the agent for the given session ID.
        :param session_id: Unique identifier for the session.
        :param user_input: The input message from the user.
        :return: The response generated by the agent.
        """
        agent = self.get_or_create_agent(session_id)
        response = agent.process_message(user_input)
        return response
    
agent_manager = AgentManager()
